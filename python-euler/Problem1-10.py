import helpers
from functools import partial
import math
"""
Link: https://projecteuler.net/problem=1
Multiples of 3 or 5
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
"""

def solution1(list_of_divisors, upper_limit):
    """Find all multiples of a list of possible divisors under the given upper limit. And return the sum of all terms."""
    li = []
    for i in range(1, upper_limit):
        for divisor in list_of_divisors:
            if i % divisor == 0:
                li.append(i)
                break
    return sum(li)

data = helpers.time_func(partial(solution1,[3,5], 1_000))
helpers.print_data(data, 1)

"""
Link: https://projecteuler.net/problem=2
Even Fibonacci Numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def solution2(upper_limit):
    """calculate the fibonacci sequence under the given upper limit. And return the sum of all even terms."""
    li = [1,2]
    while li[-1] + li[-2] < upper_limit:
        calc = li[-1] + li[-2]
        li.append(calc)
    # list comprehesion is closer to c function, making it faster than normal phyton for loops
    # https://medium.com/@stoic_sapien1/unlocking-the-power-of-list-comprehension-in-python-ca18b263b967https://medium.com/@stoic_sapien1/unlocking-the-power-of-list-comprehension-in-python-ca18b263b967
    li2 = [x for x in li if x % 2 == 0]
    return sum(li2)

data = helpers.time_func(partial(solution2, 4_000_000))
helpers.print_data(data, 2)


"""
Link: https://projecteuler.net/problem=3
Even Fibonacci Numbers
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143?
"""

def solution3_1(number):
    """calculate all prime factors of the given number. And return the biggest prime factor."""
    primes = []
    for prime_suspect in range(1, number, 1):
        is_prime = True
        for j in range(1, number, 1):
            if j == 1:
                continue
            if j == prime_suspect:
                continue
            if prime_suspect % j == 0:
                is_prime = False

        if is_prime:
            primes.append(prime_suspect)

    prime_factors = [prime for prime in primes if number % prime == 0]
    return prime_factors[-1]

def solution3_2(number):
    """calculate all prime factors of the given number. And return the biggest prime factor."""
    primes = [2] # initialize with first prime

    for prime_suspect in range(3, number, 1): # start with the second prime and, end with the given number
        is_prime = True
        for prime in primes: # check if divisible by know prime
            if prime_suspect % prime == 0:
                is_prime = False
                break # break early this is not prime anymore
        if not is_prime:
            continue # skip the rest

        for j in range(primes[-1]+1, prime_suspect, 1): # check if it is new prime, by starting one higher then last known prime in the list
            if prime_suspect % j == 0:
                is_prime = False
                break # break early this is not prime anymore
        if not is_prime:
            continue # skip the rest

        primes.append(prime_suspect)

    prime_factors = [prime for prime in primes if number % prime == 0]
    return prime_factors[-1]

def solution3_3(number):
    """calculate all prime factors of the given number. And return the biggest prime factor."""
    primes = [2] # initialize with first prime

    for prime_suspect in range(2, math.ceil(math.sqrt(number))+1, 1): # start with the second prime and, end with the square root of the given number rounded to the next whole number
        is_prime = True
        for j in range(2, math.ceil(math.sqrt(prime_suspect))+1, 1): # check if it is new prime, start with the second prime and, end with the square root of the given number rounded to the next whole number
            if prime_suspect % j == 0:
                is_prime = False
                break # break early this is not prime anymore
        if not is_prime:
            continue # skip the rest

        primes.append(prime_suspect) # this is prime

    prime_factors = [prime for prime in primes if number % prime == 0]
    return prime_factors[-1]

def solution3_4(number):
    """calculate all prime factors of the given number. And return the biggest prime factor."""
    #TODO use factor tree method
    raise NotImplementedError

data = helpers.time_func(partial(solution3_1, 13_195)) # to slow, not optimized
helpers.print_data(data, 3)
data = helpers.time_func(partial(solution3_2, 13_195)) # better, optimized
helpers.print_data(data, 3)
data = helpers.time_func(partial(solution3_3, 600_851_475_143)) # faster, using math and optimized
helpers.print_data(data, 3)
